name: Run Smoke Tests (Diag)

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  smoke:
    runs-on: ubuntu-latest
    env:
      BASE: ${{ secrets.FUNC_BASE_URL }}        # e.g., https://<your-app>.azurewebsites.net
      CODE: ${{ secrets.FUNC_CODE_DEFAULT }}    # default host key (just the key string)
    steps:
      - uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "$BASE" ] || [ -z "$CODE" ]; then
            echo "::error::Missing secrets FUNC_BASE_URL or FUNC_CODE_DEFAULT"; exit 1; fi

      - name: Login Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Tools
        run: sudo apt-get update -y && sudo apt-get install -y jq curl

      - name: Detect Function App and function URLs
        id: detect
        shell: bash
        run: |
          # Derive APP name from BASE
          APP=$(echo "$BASE" | sed -E 's#https?://([^/.]+).*#\1#')
          echo "Function App: $APP"

          # Find resource group (works without knowing RG up front)
          RG=$(az functionapp list --query "[?name=='$APP'].resourceGroup | [0]" -o tsv)
          if [ -z "$RG" ]; then
            echo "::error::Could not find resource group for app $APP"; exit 1
          fi
          echo "Resource Group: $RG"

          # List functions
          az functionapp function list -g "$RG" -n "$APP" -o json > funcs.json
          echo "=== Deployed functions ==="
          jq -r '.[] | [.name, .invokeUrlTemplate] | @tsv' funcs.json || true

          mkurl() {
            local name="$1"
            local u=$(jq -r --arg N "$name" '.[] | select(.name==$N) | .invokeUrlTemplate // empty' funcs.json)
            if [ -z "$u" ] || [ "$u" = "null" ]; then
              echo "$BASE/api/$name?code=$CODE"
            else
              if echo "$u" | grep -q 'code='; then echo "$u"; else echo "$u?code=$CODE"; fi
            fi
          }

          # Export URLs only for functions that exist
          for N in dbx_health transfer_property_owner doorloop_writeback webhook_ingestor; do
            H=$(jq -r --arg N "$N" '.[] | select(.name==$N) | .name // empty' funcs.json)
            if [ -n "$H" ]; then
              echo "${N}_url=$(mkurl "$N")" >> $GITHUB_OUTPUT
            fi
          done

      - name: Health check (dbx_health)
        shell: bash
        run: |
          if [ -z "${{ steps.detect.outputs.dbx_health_url }}" ]; then
            echo "::warning::dbx_health not found; skipping."
          else
            url="${{ steps.detect.outputs.dbx_health_url }}"
            echo "GET $url"
            resp=$(curl -s -S -w "\n%{http_code}" "$url")
            body=$(echo "$resp" | head -n -1); code=$(echo "$resp" | tail -n 1)
            echo "::notice::HTTP $code"
            echo "$body" | jq . 2>/dev/null || echo "$body"
          fi

      - name: Transfer (dry-run)
        if: steps.detect.outputs.transfer_property_owner_url != ''
        shell: bash
        run: |
          url="${{ steps.detect.outputs.transfer_property_owner_url }}"
          echo "POST $url"
          cat > body.json <<'JSON'
          {
            "from_owner": {"id": 101, "name": "Sunset Capital Partners"},
            "to_owner":   {"id": 202, "name": "Northstar Holdings"},
            "property":   {"id": 201, "name": "Sunset Villas"},
            "effective_date": "2025-08-15",
            "dry_run": true
          }
          JSON
          resp=$(curl -s -S -w "\n%{http_code}" -H "Content-Type: application/json" -d @body.json "$url")
          body=$(echo "$resp" | head -n -1); code=$(echo "$resp" | tail -n 1)
          echo "::notice::HTTP $code"
          echo "$body" | jq . 2>/dev/null || echo "$body"

      - name: DoorLoop writeback (dry-run)
        if: steps.detect.outputs.doorloop_writeback_url != ''
        shell: bash
        run: |
          url="${{ steps.detect.outputs.doorloop_writeback_url }}"
          echo "POST $url"
          cat > dl.json <<'JSON'
          {
            "property_id": 201,
            "from_owner_id": 101,
            "to_owner_id": 202,
            "effective_date": "2025-08-15",
            "dry_run": true
          }
          JSON
          resp=$(curl -s -S -w "\n%{http_code}" -H "Content-Type: application/json" -d @dl.json "$url")
          body=$(echo "$resp" | head -n -1); code=$(echo "$resp" | tail -n 1)
          echo "::notice::HTTP $code"
          echo "$body" | jq . 2>/dev/null || echo "$body"

      - name: Webhook ingestor (signature bypass for test)
        if: steps.detect.outputs.webhook_ingestor_url != ''
        shell: bash
        run: |
          url="${{ steps.detect.outputs.webhook_ingestor_url }}&skip_sig=1"
          echo "POST $url"
          cat > wh.json <<'JSON'
          {
            "type":"property.transferred",
            "property":{"id":201,"name":"Sunset Villas"},
            "from_owner":{"id":101,"name":"Sunset Capital Partners"},
            "to_owner":{"id":202,"name":"Northstar Holdings"},
            "effective_date":"2025-08-15"
          }
          JSON
          resp=$(curl -s -S -w "\n%{http_code}" -H "Content-Type: application/json" -d @wh.json "$url")
          body=$(echo "$resp" | head -n -1); code=$(echo "$resp" | tail -n 1)
          echo "::notice::HTTP $code"
          echo "$body" | jq . 2>/dev/null || echo "$body"

      - name: Done
        run: echo "Diagnostic run complete âœ…  (review HTTP codes & bodies above)"
