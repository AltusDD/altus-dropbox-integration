name: Run Smoke Tests (Diag)
on: { workflow_dispatch: {} }

permissions:
  id-token: write
  contents: read

env:
  BASE: ${{ secrets.FUNC_BASE_URL }}          # https://<app>.azurewebsites.net
  CODE: ${{ secrets.FUNC_CODE_DEFAULT }}      # default (Function) key only
  RG:   ${{ secrets.AZURE_RESOURCE_GROUP }}   # resource group name
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Detect function URLs (uses invokeUrlTemplate; smart fallbacks)
        id: urls
        shell: bash
        run: |
          set -euo pipefail
          BASE="${BASE:?FUNC_BASE_URL secret is missing}"
          CODE="${CODE:?FUNC_CODE_DEFAULT secret is missing}"
          RG="${RG:?AZURE_RESOURCE_GROUP secret is missing}"

          HOST=$(echo "$BASE" | sed -E 's#https?://([^/]+).*#\1#')
          echo "Host: $HOST  |  RG: $RG"

          # route aliases for fallback
          route_of() {
            case "$1" in
              dbx_health)              echo "health" ;;
              dropbox_upload)          echo "upload" ;;
              transfer_property_owner) echo "transfer_property_owner" ;;
              webhook_ingestor)        echo "webhook_ingestor" ;;
              doorloop_writeback)      echo "doorloop_writeback" ;;
              *) echo "$1" ;;
            esac
          }
          fallback() { echo "$BASE/api/$(route_of "$1")?code=$CODE"; }

          DBX_HEALTH_URL=$(fallback dbx_health)
          UPLOAD_URL=$(fallback dropbox_upload)
          TRANSFER_URL=$(fallback transfer_property_owner)
          WEBHOOK_URL=$(fallback webhook_ingestor)
          WRITEBACK_URL=$(fallback doorloop_writeback)

          # find the function app in RG by host
          APPS=$(az functionapp list -g "$RG" --query "[].{name:name,host:defaultHostName}" -o tsv || true)
          APP=$(echo "$APPS" | awk -v h="$HOST" '$2==h{print $1; exit}')
          [ -z "${APP:-}" ] && APP=$(echo "$APPS" | awk -v h="$HOST" 'index($2,h){print $1; exit}')

          if [ -n "${APP:-}" ]; then
            echo "Function App: $APP"
            az functionapp function list -g "$RG" -n "$APP" -o json > funcs.json
            echo "=== Deployed functions ==="
            jq -r '.[] | [.name, .invokeUrlTemplate] | @tsv' funcs.json || true

            mk() {
              local name="$1"; local u
              u=$(jq -r --arg N "$name" '.[] | select(.name==$N) | .invokeUrlTemplate // empty' funcs.json)
              if [ -n "$u" ] && [ "$u" != "null" ]; then
                [[ "$u" == *code=* ]] && echo "$u" || echo "$u?code=$CODE"
              fi
            }
            h=$(mk dbx_health);              [ -n "${h:-}" ] && DBX_HEALTH_URL="$h"
            u=$(mk dropbox_upload);          [ -n "${u:-}" ] && UPLOAD_URL="$u"
            t=$(mk transfer_property_owner); [ -n "${t:-}" ] && TRANSFER_URL="$t"
            w=$(mk webhook_ingestor);        [ -n "${w:-}" ] && WEBHOOK_URL="$w"
            d=$(mk doorloop_writeback);      [ -n "${d:-}" ] && WRITEBACK_URL="$d"
          else
            echo "Could not resolve app; using mapped fallbacks."
          fi

          {
            echo "dbx_health_url=$DBX_HEALTH_URL"
            echo "dropbox_upload_url=$UPLOAD_URL"
            echo "transfer_property_owner_url=$TRANSFER_URL"
            echo "webhook_ingestor_url=$WEBHOOK_URL"
            echo "doorloop_writeback_url=$WRITEBACK_URL"
          } >> "$GITHUB_OUTPUT"

      - name: Show discovered URLs
        run: |
          echo "dbx_health:              ${{ steps.urls.outputs.dbx_health_url }}"
          echo "dropbox_upload:          ${{ steps.urls.outputs.dropbox_upload_url }}"
          echo "transfer_property_owner: ${{ steps.urls.outputs.transfer_property_owner_url }}"
          echo "webhook_ingestor:        ${{ steps.urls.outputs.webhook_ingestor_url }}"
          echo "doorloop_writeback:      ${{ steps.urls.outputs.doorloop_writeback_url }}"

      # Make health non-blocking and fall back to /trace so we still test the rest.
      - name: Health check (try /health, fall back to /trace)
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          h="${{ steps.urls.outputs.dbx_health_url }}"
          echo "GET $h"
          resp=$(curl -sS -w "\n%{http_code}" "$h" || true)
          body=$(echo "$resp" | head -n -1); code=$(echo "$resp" | tail -n 1)
          echo "health status: $code"
          echo "$body" | jq -r . || echo "$body"

          if [ -z "$code" ] || [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then
            t="${BASE}/api/trace?code=${CODE}"
            echo "health not OK -> trying TRACE: $t"
            curl -sS "$t" || true
          fi

      - name: Upload smoke file to Dropbox
        shell: bash
        run: |
          set -euo pipefail
          url="${{ steps.urls.outputs.dropbox_upload_url }}"
          printf "smoke %s\n" "$(date -u +%s)" > msg.txt
          b64=$(base64 -w0 msg.txt 2>/dev/null || base64 msg.txt)
          cat > body.json <<JSON
          {
            "entity_type": "LeaseSigned",
            "meta": {
              "owner_id": 101,
              "owner_name": "Sunset Capital Partners",
              "property_id": 201,
              "property_name": "Sunset Villas",
              "unit_id": 5,
              "unit_name": "unit-5b-5",
              "lease_id": 6001,
              "tenant_slug": "jane-smith"
            },
            "original_filename": "smoke.txt",
            "file_base64": "$b64"
          }
          JSON
          echo "POST $url"
          resp=$(curl -sS -H "Content-Type: application/json" -d @body.json -w "\n%{http_code}" "$url")
          body=$(echo "$resp" | head -n -1); code=$(echo "$resp" | tail -n 1)
          echo "$body" | jq -r . || echo "$body"
          test "$code" -ge 200 -a "$code" -lt 300

      - name: Dry-run ownership transfer (no changes)
        if: ${{ steps.urls.outputs.transfer_property_owner_url != '' }}
        shell: bash
        run: |
          set -euo pipefail
          url="${{ steps.urls.outputs.transfer_property_owner_url }}"
          echo "POST $url"
          cat > body.json <<'JSON'
          {
            "from_owner": {"id": 101, "name": "Sunset Capital Partners"},
            "to_owner":   {"id": 202, "name": "Northstar Holdings"},
            "property":   {"id": 201, "name": "Sunset Villas"},
            "effective_date": "2025-08-15",
            "dry_run": true
          }
          JSON
          resp=$(curl -sS -H "Content-Type: application/json" -d @body.json -w "\n%{http_code}" "$url")
          body=$(echo "$resp" | head -n -1); code=$(echo "$resp" | tail -n 1)
          echo "$body" | jq -r . || echo "$body"
          test "$code" -ge 200 -a "$code" -lt 300
